import { useCallback, useMemo, useState } from 'react'
import styled, { css } from 'styled-components/macro'; //TODO improve class naming
import { boxShadowDefault } from 'media/styles/box-shadow'
import { ReactComponent as PlusIcon } from 'media/icons/plus.svg'
import Button from 'components/button'
import Loader from 'components/loader'
import { fetchRandomImage, addImage } from 'store/images.slice'
import { useDispatch } from 'react-redux';
import { useSelector } from 'react-redux';

export default function AddImage(props) {

    const dispatch = useDispatch()
    const [isInitialState, setIsInitialState] = useState(true);
    const isProcessing = useSelector(state => state.images.isLoading)
    const candidate = useSelector(state => state.images.candidate)

    const loadImage = useCallback(() => {
        setIsInitialState(false);
        dispatch(fetchRandomImage())
    })

    const renderImageSection = useMemo(() => {

        

        if (candidate) {
            return (
                <img src={candidate} onClick={() => {}}>
                </img>
            )
        } else {
            return (
                <div className="plug" onClick={loadImage}>
                    <PlusIcon />
                    <span>Add an image</span>
                </div>
            )
        }
    }, [candidate, setIsInitialState])

    const addImageToCollection = () => {
        dispatch(addImage(candidate))
        loadImage()
    }
    

    return (
        <Styled processing={isProcessing}>
            <div className="container">
                <div className="image-container">
                    {isProcessing ? <Loader /> : renderImageSection}
                </div>
                {!isInitialState && (
                    <div className="actions">
                        <Button size="large" type="secondary" >Skip</Button>
                        <Button size="large" onClick={addImageToCollection}>Add</Button>
                    </div>
                )}
            </div>
        </Styled>
    )
}

// Notice 1. About the ".container", ".plug" and other classNames:
// I allow myself to use such a common nested classNames because there are no utilitary & generic classes in the project at all.
// Unique hash generated by Styled components gives me an assurance that this classNames will have higher specificity.
// As result they will never create unexpected behavior and styles conflicts. Prefer to use such approach...

// Notice 2. About styled component location. 
// I prefer to write styled in the same file. It gives me more clean structure in explorer (folders and files). 

const Styled = styled.div`
    width: auto;
    margin-top: 50px;
    padding: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

    ${boxShadowDefault}

    ${props => props.processing && css`
        opacity: 0.8;
        pointer-events: none;
    `}

    .container {
        width: 400px;
        min-height: 400px;
        margin: 0 auto;
    }
    .image-container {
        height: 400px;
        display: flex;
        justify-content: center;
        align-items: center;
        img {
            width: auto;
            height: 100%;
        }
        .plug {
            width: 100%;
            height: 400px;
            border: 1px solid red;
            border-radius: 7px;
            transition: all 150ms ease-in-out;
            background-color: #f4f4f459;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 1px solid #8ddda0;
            &:hover {
                transform: scale(1.01);
                border-color: #7dc78e;
                cursor: pointer;
                svg {
                    transform: scale(1.45) rotate(3deg);
                }
                path {
                    fill: #37b038;
                }
            }
            svg {
                margin-right: 20px;
                transform: scale(1.4);
                path {
                    fill: #74cc75;
                    transition: all 150ms ease-in-out;
                }
            }
            span {
                font-size: 14px;
                color: #4bab4c;
                transition: all 150ms ease-in-out;
            }
        }
    }
    .actions {
        margin-top: 20px;
        display: flex;
        width: 100%;
        justify-content: space-between;
        button {
            width: 120px;
        }
    }
`

